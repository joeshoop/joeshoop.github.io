// =====================================================
// ------------ Megatype media query mixins ------------
// =====================================================
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Megatype: https://github.com/StudioThick/megatype
// =====================================================



// Media queries. Accepts px or em
// Defaults to min-width, but both min->max and max-width are available too.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7
@mixin media($min: 0, $max: 0) {
    // Type of break variable
    $min-val: type-of($min);
    $min-unit: unit($min);

    $max-val: '';
    $max-unit: '';

    @if $max != 0 {
        $max-val: type-of($max);
        $max-unit: unit($max);
    }

    @if $min-unit == "px" {
        $min: no-unit($min) / 16 * 1em;
    }

    @if $max-unit == "px" {
        $max: no-unit($max) / 16 * 1em;
    }

    $query: "all" !default;

    // If it is a number then we can proceed
    @if $min-val == number or $max-val == number {
        @if $min-unit == "px" or $min-unit == "em" {
            // If using other numbers output value in ems either for min, min & max or max width breakpoints.
            @if $max-unit == "px" or $max-unit == "em" {
                $query: "(min-width: #{$min}) and (max-width: #{$max})";
            } @else {
                $query: "(min-width: #{$min})";
            }
        } @else if $max-unit == "px" or $max-unit == "em" {
            $query: "(max-width: #{$max})";
        } @else {
            @error "#{$min} and #{$max} are not valid for use in media query mixin - must use px or ems";
        }
    } @else {
        @error "#{$min} and #{$max} values do not form a valid media query";
    }

    @if $query != "all" {
        @media #{$query} { @content; }
    }
}


// wrapper for combining breakpoint mixin and susy 'with layout' mixin. Also exposes current breakpoint to content via $current-breakpoint/root variables
@mixin breakpoint-layout($min: 0, $max: 0) {
    @if map-has-key($breakpoint-map, $min) {
        // make current breakpoint context available in global scope
        $current-breakpoint: $min !global;
        $current-rootsize: break-get($min, rootsize) !global;

        @if $current-breakpoint == 0 and $max == 0 {
            @content;
        } @else {
            $minw: break-get($min, start);

            @if map-has-key($breakpoint-map, $min) {
                $maxw: break-get($max, start);
            } @else if $min != 0 {
                // warn if we're doing a max media query, but it's not in the map
                @warn "#{$max} is not a valid breakpoint number";
            }

            @if $min != 0 and $max != 0 {
                @include media($minw, $maxw) {
                    @content;
                }
            } @else if $min != 0 {
                @include media($minw) {
                    @content;
                }
            } @else if $max != 0 {
                @include media(0, $maxw) {
                    @content;
                }
            }
        }

        // reset current breakpoint context
        $current-breakpoint: 0 !global;
        $current-rootsize: break-get(0, rootsize) !global;
    } @else {
        @warn "#{$min} is not a valid breakpoint number";
    }
}



// apply min-width media query to one or more breakpoints
@mixin min-width($apply-breaks: 0) {
    @each $break in $apply-breaks {
        @if unitless($break) == true {
            @include breakpoint-layout($break) {
                @content;
            }
        } @else {
            @include media($break) {
                @content;
            };
        }
    }
}

// apply max-width media query to one or more breakpoints
@mixin max-width($apply-breaks: 1) {
    @each $break in $apply-breaks {
        @if unitless($break) == true {
            @include breakpoint-layout(0, $break) {
                @content;
            }
        } @else {
            @include media(0, $break) {
                @content;
            };
        }
    }
}

// apply a style at all breakpoints, taking into account any change in baseline at different breakpoints
@mixin all-breakpoints {
    @each $break in $breaks {
        @include breakpoint-layout($break) {
            @content;
        }
    }
}
